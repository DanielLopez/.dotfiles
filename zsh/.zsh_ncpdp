#******************************************************************************
# Function to Format NCPDP messages from the clipboard. 
#******************************************************************************
function fmtNcpdp(){
    sed 's/\\u001c/|/g' | sed 's/\\u001e/\n/g' | sed 's/\\u001d/\n/g' | sed 's/\\u0003/\n/g'
}

#******************************************************************************
# Function to Format NCPDP messages from the clipboard. 
#******************************************************************************
function ncpdptoJson(){
    local mapSegments='{
        "AM01": "AM01-Patient",
        "AM04": "AM04-Insurance",
        "AM07": "AM07-Claim",
        "AM02": "AM02-Provider",
        "AM03": "AM03-Prescriber",
        "AM15": "AM15-Facility",
        "AM05": "AM05-COBOtherPayments",
        "AM06": "AM06-WorkersCompensation",
        "AM08": "AM08-DUR/PPS",
        "AM11": "AM11-Pricing",
        "AM09": "AM09-Coupon",
        "AM10": "AM10-Compound",
        "AM12": "AM12-PriorAuthorization",
        "AM13": "AM13-Clinical",
        "AM14": "AM14-Additional Documentation",
        "AM16": "AM16-Narrative",
        "AM20": "AM20-Message",
        "AM25": "AM25-Insurance",
        "AM21": "AM21-Status",
        "AM22": "AM22-Claim",
        "AM23": "AM23-Pricing",
        "AM24": "AM24-DUR_PPS",
        "AM26": "AM26-PriorAuthorization"
    }'

    local mapFields='{
        "F5": "F5-Something"
    }'

    # Convert NCPDP message from the clipboard to JSON format
    fmtNcpdp | awk '
    BEGIN {
      print "{"
      header_printed = 0
      segment_started = 0
    }
    {
      # Trim leading/trailing spaces
      gsub(/^ +| +$/, "")

      # Skip empty lines
      if (length($0) == 0) {
          next
      }

      if ($0 !~ /^\|/ && !header_printed) {
          # If the line does not start with |, treat it as the HEADER
          print "  \"HEADER\": \"" $0 "\","
          header_printed = 1
      } else if ($0 ~ /^\|/) {
          # Add a comma before starting a new segment (if not the first segment)
          if (segment_started) {
              print "  },"
          }
          segment_started = 1

          # Process lines starting with |
          split($0, fields, "|")
          segment_name = fields[2]  # Get the first value after the first pipe
          print "  \"" segment_name "\": {"
          for (i = 3; i <= length(fields); i++) {
              if (length(fields[i]) >= 2) {
                  field_name = substr(fields[i], 1, 2)
                  field_value = substr(fields[i], 3)
                  print "    \"" field_name "\": \"" field_value "\"" (i < length(fields) ? "," : "")
              }
          }
      }
    }
    END {
      # Close the last segment
      if (segment_started) {
          print "  }"
      }
      print "}"
    }' | jq --argjson segMap "$mapSegments" "with_entries({key: (\$segMap[.key] // .key), value: .value})"


}

#******************************************************************************
# Function to Format NCPDP messages from the clipboard. 
#******************************************************************************
function nf(){
	# Notify User
	figlet "Formatting NCPDP" | lolcat

	# Format NCPDP messages from the clipboard
	pbpaste | fmtNcpdp | pbcopy

	# Notify the user
	cowsay 'Formatted NCPDP message copied to clipboard' | lolcat

}


#******************************************************************************
# Function to detail the NCPDP in json.
#******************************************************************************
function nj() {
	# Notify User
	figlet "NCPDP to Json" | lolcat

	# Format NCPDP messages from the clipboard
	pbpaste | ncpdptoJson | pbcopy

	# Notify the user
	cowsay 'formatted ncpdp json copied to clipboard' | lolcat
}
