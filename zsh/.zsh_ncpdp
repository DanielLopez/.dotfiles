#******************************************************************************
# Function to Format NCPDP messages from the clipboard. 
#******************************************************************************
function formatNcpdp(){
	pbpaste | sed 's/\\u001c/|/g' | sed 's/\\u001e/\n/g' | sed 's/\\u001d/\n/g' | sed 's/\\u0003/\n/g'|  pbcopy
}


#******************************************************************************
# Function to Format NCPDP messages from the clipboard. 
#******************************************************************************
function fn(){
	# Notify User
	figlet "Formatting NCPDP" | lolcat

	# Format NCPDP messages from the clipboard
	formatNcpdp

	# Notify the user
	cowsay 'Formatted NCPDP message copied to clipboard' | lolcat

}

#******************************************************************************
# Function to detail the NCPDP in json.
#******************************************************************************
function jn() {

  # Notify User
  figlet "NCPDP to JSON" | lolcat

  # Invoke Format
  formatNcpdp	

  # Convert NCPDP message from the clipboard to JSON format
  pbpaste | awk '
  BEGIN {
      print "{"
      header_printed = 0
      segment_started = 0
  }
  {
      # Trim leading/trailing spaces
      gsub(/^ +| +$/, "")

      # Skip empty lines
      if (length($0) == 0) {
          next
      }

      if ($0 !~ /^\|/ && !header_printed) {
          # If the line does not start with |, treat it as the HEADER
          print "  \"HEADER\": \"" $0 "\","
          header_printed = 1
      } else if ($0 ~ /^\|/) {
          # Add a comma before starting a new segment (if not the first segment)
          if (segment_started) {
              print "  },"
          }
          segment_started = 1

          # Process lines starting with |
          split($0, fields, "|")
          segment_name = fields[2]  # Get the first value after the first pipe
          print "  \"" segment_name "\": {"
          for (i = 3; i <= length(fields); i++) {
              if (length(fields[i]) >= 2) {
                  field_name = substr(fields[i], 1, 2)
                  field_value = substr(fields[i], 3)
                  print "    \"" field_name "\": \"" field_value "\"" (i < length(fields) ? "," : "")
              }
          }
      }
  }
  END {
      # Close the last segment
      if (segment_started) {
          print "  }"
      }
      print "}"
  }' | jq . | pbcopy

  # Notify the user
  cowsay 'JSON has been copied to the clipboard.' | lolcat
}
